name: Deploy

on:
  workflow_dispatch:
    inputs:
      ref:
        description: Git ref to deploy
        required: false
        default: main
  push:
    branches: [main]
    paths-ignore:
      - '.github/**'
      - 'docs/**'

concurrency:
  group: deploy-${{ github.ref }}
  cancel-in-progress: true

env:
  DATABASE_URL: postgresql://postgres:postgres@localhost:5432/healthcheck?schema=public
  NEXT_PUBLIC_DB_TIMEOUT: 2500
  NEXT_PUBLIC_ADMIN_TIMEOUT: 5000
  NODE_ENV: production
  APP_ENV: production

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:16
        ports:
          - 5432:5432
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: healthcheck
        options: >-
          --health-cmd "pg_isready -U postgres -d healthcheck"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.inputs.ref || github.ref }}

      - name: Use Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Generate Prisma client
        run: npx prisma generate

      - name: Run database migrations (no-op in build stage)
        run: npx prisma migrate deploy

      - name: Build application
        run: npm run build

      - name: Upload deployment artifact
        uses: actions/upload-artifact@v4
        with:
          name: next-app
          retention-days: 3
          path: |
            .next
            package.json
            package-lock.json
            prisma/schema.prisma
            public
            scripts
            next.config.ts
            tsconfig.json
            .env.example

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    environment:
      name: production
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: next-app
          path: release

      - name: Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Copy files to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          source: "release/*"
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Run remote deployment commands
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script: |
            cd ${{ secrets.DEPLOY_PATH }}
            npm ci --omit=dev
            npx prisma migrate deploy
            npm run build
            pm2 restart healthcheck || pm2 start npm --name healthcheck -- run start
