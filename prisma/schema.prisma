// Prisma schema for HealthCheck CM Price

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  EDITOR
  USER
}

enum PackageStatus {
  DRAFT
  APPROVED
  ARCHIVED
}

model User {
  id                        String                     @id @default(cuid())
  email                     String                     @unique
  name                      String?
  role                      Role                       @default(USER)
  passwordHash              String?
  image                     String?
  lastLoginAt               DateTime?
  bookmarks                 Bookmark[]
  savedSearches             SavedSearch[]
  views                     PackageView[]
  notifications             Notification[]
  notificationSubscriptions NotificationSubscription[]
  savedCompares             SavedCompare[]
  auditTrails               AuditTrail[]               @relation("AuditTrailActor")
  searchLogs                SearchLog[]
  compareSnapshots          CompareSnapshot[]
  cart                      Cart?
  accounts                  Account[]
  sessions                  Session[]
  Authenticator             Authenticator[]
}

model Hospital {
  id        String          @id @default(cuid())
  name      String          @unique
  shortName String?
  district  String?
  phone     String?
  website   String?
  logoUrl   String?
  packages  HealthPackage[]
  createdAt DateTime        @default(now())
  updatedAt DateTime        @updatedAt
}

model HealthPackage {
  id            String                     @id @default(cuid())
  hospital      Hospital                   @relation(fields: [hospitalId], references: [id])
  hospitalId    String
  title         String
  slug          String                     @unique
  description   String?
  basePrice     Int
  priceNote     String?
  gender        String?
  minAge        Int?
  maxAge        Int?
  category      String[]
  includes      PackageItem[]
  status        PackageStatus              @default(DRAFT)
  sourceUrl     String?
  validFrom     DateTime?
  validTo       DateTime?
  lastChecked   DateTime?
  createdAt     DateTime                   @default(now())
  updatedAt     DateTime                   @updatedAt
  histories     PriceHistory[]
  approvals     ApprovalLog[]
  tags          String[]
  bookmarks     Bookmark[]
  views         PackageView[]
  metrics       PackageMetric?
  notifications NotificationSubscription[]
  cartItems     CartItem[]

  @@index([hospitalId])
  @@index([basePrice])
  @@index([updatedAt])
}

model PackageItem {
  id         String        @id @default(cuid())
  package    HealthPackage @relation(fields: [packageId], references: [id])
  packageId  String
  name       String
  groupName  String?
  isOptional Boolean       @default(false)
}

model PriceHistory {
  id         String        @id @default(cuid())
  package    HealthPackage @relation(fields: [packageId], references: [id])
  packageId  String
  price      Int
  recordedAt DateTime      @default(now())
  notes      String?
}

model ApprovalLog {
  id        String        @id @default(cuid())
  package   HealthPackage @relation(fields: [packageId], references: [id])
  packageId String
  action    String
  actorId   String?
  reason    String?
  createdAt DateTime      @default(now())
}

model PackageMetric {
  id             String        @id @default(cuid())
  package        HealthPackage @relation(fields: [packageId], references: [id])
  packageId      String        @unique
  viewCount      Int           @default(0)
  compareCount   Int           @default(0)
  bookmarkCount  Int           @default(0)
  lastViewedAt   DateTime?
  lastComparedAt DateTime?
  updatedAt      DateTime      @updatedAt
}

model PackageView {
  id        String        @id @default(cuid())
  package   HealthPackage @relation(fields: [packageId], references: [id])
  packageId String
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  type      ViewEventType @default(VIEW)
  source    String?
  createdAt DateTime      @default(now())

  @@index([packageId, createdAt])
  @@index([userId, createdAt])
}

model CompareSnapshot {
  id         String    @id @default(cuid())
  slug       String    @unique
  packageIds String[]
  user       User?     @relation(fields: [userId], references: [id])
  userId     String?
  createdAt  DateTime  @default(now())
  expiresAt  DateTime?

  @@index([createdAt])
}

model SavedSearch {
  id        String   @id @default(cuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  name      String
  params    Json
  createdAt DateTime @default(now())

  @@index([userId, createdAt])
}

model SearchLog {
  id        String   @id @default(cuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  filters   Json
  results   Int
  createdAt DateTime @default(now())

  @@index([createdAt])
  @@index([userId, createdAt])
}

model Notification {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  type      NotificationType
  payload   Json?
  readAt    DateTime?
  createdAt DateTime         @default(now())

  @@index([userId, createdAt])
  @@index([userId, readAt])
}

model NotificationSubscription {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  userId    String
  package   HealthPackage?   @relation(fields: [packageId], references: [id])
  packageId String?
  type      NotificationType
  createdAt DateTime         @default(now())

  @@index([userId, type])
  @@index([packageId, type])
}

model AuditTrail {
  id         String      @id @default(cuid())
  actor      User?       @relation("AuditTrailActor", fields: [actorId], references: [id])
  actorId    String?
  action     AuditAction
  entityId   String?
  entityType String?
  diff       Json?
  createdAt  DateTime    @default(now())

  @@index([actorId, createdAt])
  @@index([entityType, entityId])
}

model SavedCompare {
  id         String   @id @default(cuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  packageIds String[]
  note       String?
  createdAt  DateTime @default(now())
}

model FeatureFlag {
  id        String   @id @default(cuid())
  key       String   @unique
  enabled   Boolean  @default(false)
  payload   Json?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model SystemLog {
  id        String   @id @default(cuid())
  level     LogLevel
  message   String
  context   Json?
  createdAt DateTime @default(now())

  @@index([level, createdAt])
}

model Cart {
  id        String     @id @default(cuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique
  items     CartItem[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model CartItem {
  id         String        @id @default(cuid())
  cart       Cart          @relation(fields: [cartId], references: [id])
  cartId     String
  package    HealthPackage @relation(fields: [packageId], references: [id])
  packageId  String
  quantity   Int           @default(1)
  addedAt    DateTime      @default(now())

  @@unique([cartId, packageId])
  @@index([packageId])
}

enum ViewEventType {
  VIEW
  COMPARE
  BOOKMARK
}

enum NotificationType {
  PRICE_DROP
  PACKAGE_APPROVED
  GENERAL
}

enum AuditAction {
  LOGIN
  CREATE_PACKAGE
  UPDATE_PACKAGE
  APPROVE_PACKAGE
  REJECT_PACKAGE
  ARCHIVE_PACKAGE
  UPDATE_PRICE
  EXPORT_DATA
  RESET_PASSWORD
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

model Bookmark {
  id        String        @id @default(cuid())
  user      User          @relation(fields: [userId], references: [id])
  userId    String
  package   HealthPackage @relation(fields: [packageId], references: [id])
  packageId String
  createdAt DateTime      @default(now())

  @@unique([userId, packageId])
}

model Account {
  id                 String  @id @default(cuid())
  user               User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String
  expires      DateTime
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Authenticator {
  credentialID        String   @id
  user                User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId              String
  provider            String
  credentialPublicKey Bytes
  counter             Int
  transports          String?
  createdAt           DateTime @default(now())

  @@index([userId])
}
